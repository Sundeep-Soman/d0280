    1  sudo reboot
    2  oc whoami 
    3  ssh lab@utitlty
    4  ssh lab@utility
    5  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP https://console-openshift-console.apps.ocp4.example.com
    6  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP https://console-openshift-console.apps.ocp4.example.com:6443
    7  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP https://api.ocp4.example.com:6443
    8  oc whoami 
    9  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP https://api.ocp4.example.com:6443
   10  nc -v https://api.ocp4.example.com:6443
   11  nc -v api.ocp4.example.com 6443
   12  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP https://api.ocp4.example.com:6443
   13  # oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP https://api.ocp4.example.com:6443
   14  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
   15  yum provides htpasswd
   16  oc get co | grep oauth
   17  oc whoami 
   18  whatis htpasswd 
   19  htpasswd -c htpasswd -B geojit 
   20  #htpasswd -B  -c htpasswd geojit 
   21  #htpasswd -B  -c htpasswd geojit  --- any name and pasword will asked -B is the algorith
   22  htpasswd -B  -c htpasswd geojit 
   23  cat htpasswd 
   24  #htpasswd -B htpasswd alice -- adding another user, and no need to add -c, it will overwirte
   25  htpasswd -B htpasswd alice
   26  cat htpasswd 
   27  #use this file to modify the oauth
   28  #identity provide is htpaswd nowd and need to set this file
   29  #oc create secret generic htpasswd-secret --from-file htpasswd=/home/student/htpasswd -n openshift-config
   30  history 
   31  #oc create secret generic myhtpasswd-secret --from-file htpasswd=/home/student/htpasswd -n openshift-config
   32  oc get secrets -n openshift-config
   33  oc create secret generic myhtpasswd-secret --from-file htpasswd=/home/student/htpasswd -n openshift-config
   34  oc get secrets -n openshift-config
   35  oc get secrets/myhtpasswd-secret
   36  oc extract secret
   37  oc extract secret/myhtpassword-secret
   38  history 
   39  oc get secrets/myhtpasswd-secret
   40  oc get secrets/myhtpasswd-secret -n openshift-config
   41  oc get secrets/myhtpasswd-secret -n openshift-config -o yaml
   42  #oc get secrets/myhtpasswd-secret -n openshift-config -o yaml
   43  oc extract secrets/myhtpasswd-secret -n openshift-config
   44  cat htpasswd 
   45  oc get oauth/cluster 
   46  oc get oauth/cluster -o yaml
   47  #oc get oauth/cluster -o yaml -- only ldap provider is there
   48  oc explain oauth.spec
   49  #oc explain oauth.spec -- check what are need for htpasswd
   50  oc explain oauth.spec.htpasswd
   51  oc explain oauth.spec.identityProviders.htpasswd
   52  #oc explain oauth.spec.identityProviders.htpasswd -- can see what are to be required to ad htpasswd 
   53  oc get pods -n openshift-authentication
   54  #oc get pods -n openshift-authentication  -- this pod will update when conf changed
   55  oc edit oauth/cluster 
   56  oc edit oauth/cluster  -o yaml
   57  oc get oauth/cluster  -o yaml
   58  oc get oauth/cluster  -o yaml > backup.yaml
   59  oc edit oauth/cluster 
   60  oc get pods -n openshift-authentication
   61  history 
   62  oc get pods -n openshift-authentication
   63  watch oc get pods -n openshift-authentication
   64  #watch oc get pods -n openshift-authentication -- new pod created
   65  oc edit oauth/cluster 
   66  oc get oauth/cluster  -o yaml > edited.yaml
   67  oc whoami --show-console
   68  oc get pods -n openshift-authentication
   69  oc describe pods -n openshift-authentication
   70  #oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
   71  oc login -u geojit -p redhat https://api.ocp4.example.com:6443
   72  oc whoami 
   73  #oc login -u geojit -p redhat https://api.ocp4.example.com:6443  -- geojit-redhat logined
   74  oc login -u geojit -p redhat https://api.ocp4.example.com:6443
   75  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
   76  oc get user
   77  oc get user | grep geojit
   78  #oc get user | grep geojit -- will show entry if the user even login once
   79  #add another user in htpasswd and authenticate
   80  ll
   81  oc login -u alice https://api.ocp4.example.com:6443
   82  #oc login -u alice https://api.ocp4.example.com:6443 -- alice-alice
   83  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
   84  htpasswd -B htpasswd sundeep
   85  oc get secrets 
   86  oc get secrets -n openshift-config
   87  #oc get secrets -n openshift-config -- need to update the secret myhtpasswd-secret
   88  oc edit secrets/myhtpasswd-secret -n openshift-config
   89  oc get secrets -n openshift-config
   90  #oc set data secret/myhtpasswd-secret --from-file=htpasswd=/home/
   91  ll
   92  pwd
   93  #oc set data secret/myhtpasswd-secret --from-file=htpasswd=/home/student/htpasswd -n openshift-config
   94  oc describe  myhtpasswd-secret -n openshift-config
   95  oc get myhtpasswd-secret -n openshift-config
   96  oc get secret/myhtpasswd-secret -n openshift-config
   97  oc describe secret/myhtpasswd-secret -n openshift-config
   98  #oc get secret/myhtpasswd-secret -n openshift-config
   99  #oc describe secret/myhtpasswd-secret -n openshift-config
  100  oc set data secret/myhtpasswd-secret --from-file=htpasswd=/home/student/htpasswd -n openshift-config
  101  oc describe secret/myhtpasswd-secret -n openshift-config
  102  oc get secret/myhtpasswd-secret -n openshift-config
  103  oc edit secrets/myhtpasswd-secret
  104  oc edit secrets/myhtpasswd-secret -n openshift-config
  105  oc get pods -n openshift-authentication
  106  #oc set data secret/myhtpasswd-secret --from-file=htpasswd=/home/student/htpasswd -n openshift-config --- update the secret with new data and wait for the oauth pod to recreate
  107  oc get pods -n openshift-authentication
  108  #login sucess for sundeep sundeep
  109  #now delete a user who left the orgnization-- delete from htpass/update secret/ also if the user logined once those data will be on the cluster and need to delete that also
  110  cat htpasswd 
  111  htpasswd -h
  112  htpasswd -D alice
  113  history 
  114  htpasswd -D htpasswd alice
  115  cat htpasswd 
  116  #htpasswd -D htpasswd alice --delete the user from htpasswd
  117  oc set data secret/myhtpasswd-secret --from-file=htpasswd=/home/student/htpasswd -n openshift-config
  118  #oc set data secret/myhtpasswd-secret --from-file=htpasswd=/home/student/htpasswd -n openshift-config -- updated htpasswd
  119  oc get pods -n openshift-authentication
  120  watch oc get pods -n openshift-authentication
  121  oc get user
  122  cat htpasswd 
  123  oc login -u alice https://api.ocp4.example.com:6443
  124  oc whoami 
  125  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
  126  cat htpasswd 
  127  oc set data secret/myhtpasswd-secret --from-file=htpasswd=/home/student/htpasswd -n openshift-config
  128  cat htpasswd 
  129  watch oc get pods -n openshift-authentication
  130  ll
  131  cat htpasswd 
  132  oc get secret -n openshift-config 
  133  oc extract secret/myhtpasswd-secret -n openshift-config --to=/tmp --confirm 
  134  cat /tmp/htpasswd 
  135  oc get pods -n openshift-authentication
  136  oc get user 
  137  oc login -u alice https://api.ocp4.example.com:6443
  138  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
  139  #oc extract secret/myhtpasswd-secret -n openshift-config --to=/tmp --confirm --- check secret data
  140  #oc get user -- check the user
  141  oc get identity
  142  #oc get identity -- check identity
  143  #alice was deleted from secret but still able to login since she logined once and both user and identiy still exists
  144  oc delete user alice
  145  oc delete identity alice
  146  oc get identity
  147  oc delete identity alice
  148  oc delete identity myusers:alice
  149  #oc delete identity myusers:alice ---deletd identity
  150  #oc delete user alice  -- deleted user
  151  #now all access gone
  152  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
  153  htpasswd -n -B mydev
  154  #Type of users --- kubeadmin,system user, regular user, sa
  155  os whoani
  156  oc whoami 
  157  oc whoami --show-server 
  158  oc login -u sundeep -p sundeep https://api.ocp4.example.com:6443
  159  oc new-project myproject-sun
  160  oc get sa
  161  oc get secret
  162  oc describe sa default 
  163  oc describe get secret
  164  oc] get secret
  165  oc get secret
  166  oc get secrets -n openshift-config
  167  #role can be assgined to namesapce or cluster
  168  #type of roles can assign in a project: admin,edit,view,cluster-domain,self-provisioner
  169  history 
  170  oc whoami 
  171  oc get project
  172  oc get rolebinding
  173  oc policy who-can create project
  174  #oc policy who-can create project -- asking system who can
  175  oc get clusterrole | grep -i self
  176  oc describe clusterrole self-provisioner 
  177  oc get clusterrolebindings | grep self
  178  oc get clusterrolebindings | grep -i self
  179  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
  180  oc get clusterrolebindings | grep self
  181  oc describe clusterrole self-provisioner 
  182  oc describe clusterrolebindings self-provisioner 
  183  #every user who sucessfully logined in via oauth will assgin to group  Group  system:authenticated:oauth so will get self-provisioner 
  184  ########
  185  oc adm policy -H
  186  oc adm policy -h
  187  #oc adm policy -h   -- add a cluser role to a user
  188  #oc policy -- add a project level to user
  189  oc policy -h
  190  oc adm policy add-cluster-role-to-user cluster-admin geojit
  191  #oc adm policy add-cluster-role-to-user cluster-admin geojit -- set geojit as admin
  192  oc project
  193  #now in myproject-sun
  194  oc get rolebinding -o yaml
  195  oc get rolebinding -o wide
  196  oc policy add-role-to-user view geojit -n myproject-sun
  197  #oc policy add-role-to-user view geojit -n myproject-sun  -- set sundeep to view on the project
  198  oc get rolebinding -o wide
  199  htpasswd -n -B mydev
  200  #htpasswd -n -B mydev --- details genrated and this can be added via console to update the secret
  201  oc whoami 
  202  oc get pods -n openshift-authentication
  203  oc login -u mydev -p mydev 
  204  oc whoami 
  205  oc whoami --show-server 
  206  #now user mydev able to login
  207  oc project
  208  oc projects
  209  oc get project
  210  oc whoami 
  211  history 
  212  oc whoami 
  213  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
  214  oc project
  215  oc projects
  216  #now user mydev able to login
  217  oc login -u mydev -p mydev 
  218  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
  219  oc get user
  220  htpasswd -n -B alice
  221  oc get rolebinding
  222  oc get rolebinding cluster-admin 
  223  oc get rolebinding cluster-admin -o wide
  224  oc describe rolebinding cluster-admin 
  225  oc adm groups --elp 
  226  oc adm groups --help 
  227  oc adm groups ocpadmins
  228  oc adm groups
  229  oc wh
  230  oc whoami
  231  oc get group 
  232  oc get clusterrolebinding -A | grep cluster-admin
  233  oc describe cluster-admin-1
  234  oc describe clusterrolebindings cluster-admin-1
  235  #oc get clusterrolebinding -A | grep cluster-admin
  236  oc get clusterrolebinding -A | grep geojit
  237  oc describe clusterrolebinding -A | grep geojit
  238  ##how to check geojits rolebinding (now admin)
  239  oc whoami 
  240  oc login geojit
  241  oc login -u geojit
  242  oc whoami 
  243  oc new-project orange
  244  oc project
  245  oc get user
  246  #oc policy add-role-to-user edit suneep -n orange  -- addig edit permission to sundeep to orange project
  247  oc policy add-role-to-user edit suneep -n orange
  248  oc policy add-role-to-user edit sundeep -n orange
  249  oc get clusterrolebindings.
  250  oc get clusterrolebindings | grep sundeep
  251  oc get rolebindings
  252  oc get rolebindings -o wide
  253  #oc get rolebindings -o wide -- verify the edit role is there
  254  oc get rolebindings -o wide
  255  oc policy -h
  256  oc policy remove-role-from-user edit suneep -n orang
  257  oc get rolebindings -o wide
  258  oc policy remove-role-from-user edit suneep -n orang
  259  oc whoami 
  260  l
  261  oc get rolebinding
  262  oc get rolebinding -o wide 
  263  oc policy remove-role-from-user edit suneep
  264  oc policy remove-role-from-user edit sundeep
  265  oc get rolebinding -o wide 
  266  #oc policy remove-role-from-user edit suneep -- removed the role binding
  267  oc policy add-role-to-user edit sundeep -n orange
  268  oc get rolebinding -o wide 
  269  oc login sundeep
  270  oc login -u sundeep
  271  oc project
  272  oc new-app --name=myapp quay.io/redhattrainig/hello-world-nginx:v1.0
  273  oc new-app --name=myapp quay.io/redhattraining/hello-world-nginx:v1.0
  274  oc get all
  275  oc expose service/myapp 
  276  oc get routes.route.openshift.io 
  277  curl myapp-orange.apps.ocp4.example.com
  278  oc get deployment
  279  oc get all
  280  oc get deployment
  281  oc scale deployment/myapp --replicas=5
  282  oc get po
  283  oc scale deployment/myapp --replicas=1
  284  oc get deployment
  285  ####
  286  oc describe 
  287  oc describe project orange 
  288  oc get  resourcequotas 
  289  oc get limitranges 
  290  #resorcequota-- cout of object
  291  #resorcequota-- count of object
  292  #resourcelimit-- per pod or per container resource limit (image size and no of image)--cpu mem etc
  293  oc create quota -h 
  294  q
  295  oc get pods 
  296  oc get deployment 
  297  oc scale deploy/myapp --replicas=5
  298  oc get pod 
  299  oc get events 
  300  oc get deploy
  301  oc get resourcequotas 
  302  oc describe resourcequotas example
  303  oc delete resourcequotas example
  304  oc login -u geojit
  305  oc delete resourcequotas example
  306  oc get limitranges 
  307  oc adm top pod
  308  oc get pod -o wide 
  309  oc get limitranges 
  310  oc describe limitranges mem-limit-range 
  311  oc get pod -o wide 
  312  ###
  313  oc whoami 
  314  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
  315  #project template
  316  #policy for org to set limitation to a project
  317  oc adm create-bootstrap-project-template -o yaml
  318  oc adm create-bootstrap-project-template -o yaml > template.yaml
  319  vim template.yaml 
  320  #need to add quota definition to the template yaml
  321  oc create quota project-quota --hard=pods=3,secrets=10 --dry-run=server -o yaml
  322  #oc create quota project-quota --hard=pods=3,secrets=10 --dry-run=server -o yaml --- got the quota settings
  323  vim template.yaml 
  324  oc create quota project-quota --hard=pods=3,secrets=10 --dry-run=server -o yaml > quota.yaml
  325  vim quota.yaml 
  326  #edite quota.yaml to remove unwanted lines
  327  vim template.yaml 
  328  #added values to template.yaml 
  329  ll
  330  oc get template -n openshift-config
  331  oc apply -f template.yaml -n openshift-config --- created the template inside the openshift-config namespace to apply for all new projects
  332  #oc apply -f template.yaml -n openshift-config --- created the template inside the openshift-config namespace to apply for all new projects
  333  #oc get template -n openshift-config -- check any existing template is there
  334  oc apply -f template.yaml -n openshift-config
  335  oc get template -n openshift-config
  336  oc get projects.config.openshift.io/cluster -o yaml
  337  #oc get projects.config.openshift.io/cluster -o yaml ---  manifest for the default project creation details, and add new template resource to apply 
  338* 
  339  oc edit projects.config.openshift.io/cluster 
  340  oc get projects.config.openshift.io/cluster -o yaml > oldtemplate.yaml
  341  ll
  342  oc edit projects.config.openshift.io/cluster 
  343  #oc edit projects.config.openshift.io/cluster --- added our template name to this
  344  oc get pods -n openshift-apiserver
  345  #oc get pods -n openshift-apiserver --- when edited the default template file,all api pods in master will restart
  346  oc get pods -n openshift-apiserver
  347  watch oc get pods -n openshift-apiserver
  348  #this can take upto 15 min
  349  watch oc get pods -n openshift-apiserver
  350  oc whoami 
  351  oc login -u geojit
  352  oc projects
  353  oc get users
  354  oc login -u sundeep
  355  oc new-project new-template
  356  oc describe project new-template 
  357  oc get rolebinding -o wide 
  358  #created a new project in a user and can see the quotas are set by default
  359  oc edit projects.config.openshift.io/cluster 
  360  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
  361  oc edit projects.config.openshift.io/cluster 
  362  vim template.yaml 
  363  ll
  364  oc login -u sundeep
  365  oc describe project new-template 
  366  oc describe project orange 
  367  ll
  368  history > day-01.txt
  369  vim day-01.txt 
  370  htpasswd -h
  371  vim day-01.txt 
  372  htpasswd -h
  373  vim day-01.txt 
  374  oc get pods -n openshift-authentication
  375  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
  376  oc get pods -n openshift-authentication
  377  vim day-01.txt 
  378  ll
  379  cat backup.yaml 
  380  ll
  381  cat edited.yaml 
  382  vim day-01.txt 
  383  cat day-01.txt 
  384  vim com.txt
  385  cat com.txt 
  386  oc get clusterrolebindings -A
  387  cat com.txt 
  388  oc get clusterrolebindings -A | grep cluster-admin
  389  cat com.txt 
  390  oc describe cluster-admin-q
  391  oc describe clusterrolebindings cluster-admin
  392  oc describe clusterrolebindings cluster-admin-0
  393  oc describe clusterrolebindings cluster-admin-1
  394  cat com.txt 
  395  oc get clusterrolebinding -A | grep cluster-admin
  396  cat com.txt 
  397  oc get clusterrolebinding -A | grep geojit
  398  oc describe clusterrolebinding -A | grep geojit
  399  vim day-01.txt 
  400  cat template.yaml 
  401  cat quota.yaml 
  402  vim day-01.txt 
  403  ll
  404  cat oldtemplate.yaml 
  405  ll
  406  cat template.yaml 
  407  oc get  template -n openshift-config
  408  oc edit projects.config.openshift.io 
  409  vim day-01.txt 
  410  #Day 02
  411  lll
  412  ll
  413  oc whoami -t
  414  oc whoami -c
  415  oc project
  416  oc describe project
  417  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
  418  oc projects
  419  :q!
  420  vim day-01.txt 
  421  oc describe project orange 
  422  oc projects
  423  oc project myproject-sun 
  424  oc describe project
  425  oc get clusterversions
  426  #oc get clusterversions ---check the upadates from internet or using a middleman
  427  #oc get nodes -- will show k8 version
  428  oc project
  429  oc projects
  430  oc get markeplaces
  431  oc get catalogsources -A
  432  #oc get catalogsources -A -- available repo sorces
  433  #operatoehub.io -- can get all images
  434  #operatorhub can ve resrticted to use secure image inside the cluster
  435  #imarative Vs decalarative
  436  oc get aall
  437  oc get all
  438  oc whoami 
  439  oc get -A
  440  #nake pods -- one who haven't any manager
  441  ll
  442  mkdir Day1
  443  find . -type -f
  444  find . -typef
  445  find . -type f
  446  find . maxdepth=1 -type f 
  447  find . maxdepth=0 -type f 
  448  ll
  449  mkdir Day2
  450  cd Day2
  451  ll
  452  kubectl create deployment myweb --image=quay.io/redhattraining/hello-world-nginx:v1.0 --dry-run=server -o yaml
  453  kubectl create deployment myweb --image=quay.io/redhattraining/hello-world-nginx:v1.0 --dry-run=server -o yaml > deploymnt.yaml
  454  vim deploymnt.yaml 
  455  kubectl apply -f deploymnt.yaml 
  456  kubectl get deploy
  457  oc get po
  458  kubectl exec -it myweb-86b7c84776-hqwd5 -- curl localhost:8080
  459  kubectl exec myweb-86b7c84776-hqwd5 -- curl localhost:8080
  460  #kubectl exec -it myweb-86b7c84776-hqwd5 -- curl localhost:8080 --- check app is running
  461  kubectl exec -it myweb-86b7c84776-hqwd5 -- curl localhost:8080
  462  kubectl create deployment myweb --image=quay.io/redhattraining/hello-world-nginx:v1.0 --dry-run=server --validate=true -o yaml > deploymnt.yaml
  463  #kubectl create deployment myweb --image=quay.io/redhattraining/hello-world-nginx:v1.0 --dry-run=server --validate=true -o yaml > deploymnt.yaml  ----- will validate typo also
  464  ll
  465  kubectl diff -f deploymnt.yaml 
  466  kubectl get po
  467  kubectl edit deploy deploymn
  468  kubectl edit deploy deploymnt
  469  kubectl get deploy
  470  kubectl edit deploy myweb
  471  kubectl get po
  472  kubectl diff -f deploymnt.yaml 
  473  cat deploymnt.yaml 
  474  ll
  475  kubectl create deployment myweb --image=quay.io/redhattraining/hello-world-nginx:v1.0 --dry-run=server --validate=true -o yaml > deploymnt.yaml
  476  kubectl get deploy myapp -o yaml
  477  #kubectl diff -f deploymnt.yaml --- can compare local file and cluster manifest changes
  478  kubectl create deployment myweb --image=quay.io/redhattraining/hello-world-nginx:v1.0 --dry-run=client -o yaml > deploymnt.yaml
  479  ll
  480  cat deploymnt.yaml 
  481  kubectl diff -f deploymnt.yaml 
  482  #Kustomizatio --- 2 director -- base and overlay
  483  kubectl delete -f deploymnt.yaml 
  484  kubectl get all
  485  ll
  486  >deploymnt.yaml 
  487  kubectl create deployment myweb --image=quay.io/redhattraining/hello-world-nginx:v1.0 --dry-run=server --validate=true -o yaml > deploymnt.yaml
  488  #created a deployment
  489  mkdir base && mkdir overlay
  490  #created both folders
  491  mkdir -p overlay/dev && mkdir -p overlay/prod
  492  #created subdirectories
  493  ll
  494  tree 
  495  mv deploymnt.yaml base/
  496  #moved yaml to base
  497  #all required default should be in base and what are to be changed in overlay
  498  ll
  499  kubectl apply -k base/
  500  #will throw error since kustomization.yaml is created with specificaions
  501  vim base/kustomization.yaml
  502  cat base/
  503  ll base/
  504  vim base/kustomization.yaml
  505  cat base/kustomization.yaml 
  506  #defined resource in kustomization
  507  ll
  508  tr
  509  tree 
  510  kubectl get all
  511  kubectl apply -k base/
  512  kubectl get all
  513  #app deployed
  514  kubectl exec -it pod/myweb-86b7c84776-772ht -- curl localhost:8080
  515  #app is working
  516  cat base/deploymnt.yaml 
  517  ll
  518  kubectl delete -k base/
  519  vim base/deploymnt.yaml 
  520  kubectl apply -k base/
  521  kubectl get all
  522  kubectl exec -it pod/myweb-86b7c84776-772ht -- curl localhost:8080
  523  kubectl exec -it pod/myweb-6b7c574464-54mbf -- curl localhost:8080
  524  kubectl exec -it pod/myweb-86b7c84776-772ht -- curl localhost:8080
  525  kubectl exec -it pod/myweb-6b7c574464-54mbf -- curl localhost:8080
  526  #delete the deployment for now to make changes
  527  kubectl delete -k base/
  528  kubectl get all
  529  tree 
  530  cp base/kustomization.yaml overlay/dev/
  531  vim overlay/dev/kustomization.yaml 
  532  #CREATED overlay/dev/kustomization.yaml AND DEFINED BASE PATH
  533  #NEED TO DEFINE WHAT CHANGES ARE REQUIRED WHEN DEPLLOYED FROM DEV
  534  vim overlay/dev/kustomization.yaml 
  535  #ADDED A PREFIX IN DEV
  536  vim base/kustomization.yaml 
  537  #ADDED COMMON LABEL IN THE BASE SO ALL RESOUCE HAVE THE SAME LABEL
  538  #IT WILL ALSO APPLIED WHEN DEPLOYED FROM DEV
  539  vim overlay/dev/kustomization.yaml 
  540  #NOW ADDED IN DEV A LABEL AND IT WILL OVERIDE THE BASE LABEL
  541  cat base/kustomization.yaml 
  542  cat overlay/dev/kustomization.yaml 
  543  kubectl apply -k base/
  544  kubectl get all
  545  kubectl get all --show-labels
  546  #DEPLOYED FROM BASE AND ITS SHOWING GEOJIT AS THE LABEL
  547  kubectl apply -k overlay/dev/
  548  kubectl get all --show-labels
  549  ll
  550  cat base/kustomization.yaml 
  551  cat overlay/dev/kustomization.yaml 
  552  kubectl kustomize overlay/dev/
  553  #kubectl kustomize overlay/dev/ -- this will show what will be deployed as manifest
  554  ll
  555  cp overlay/dev/kustomization.yaml cp overlay/prod/
  556  cp overlay/dev/kustomization.yaml cp overlay/prod/kustomization.yaml 
  557  ll
  558  tree 
  559  vim overlay/prod/kustomization.yaml 
  560  kubectl apply -f overlay/prod/
  561  tree 
  562  vim overlay/prod/kustomization.yaml 
  563  kubectl apply -f overlay/prod/
  564  kubectl apply -k overlay/prod/
  565  #NOW ADDED PROD DETAILS AND APPLIED
  566  kubectl get all
  567  kubectl get all --show-labels
  568  kubectl get po --show-labels
  569  kubectl exec -it dev-myweb-6886b7c78b-f65hf -- curl localhost:8080
  570  kubectl exec -it prod-myweb-6c4cffb86-fmvkn -- curl localhost:8080
  571  kubectl exec -it myweb-7d84d75bdd-qjfb9 -- curl localhost:8080
  572  #ALL POD HAS SAME CONTENT
  573  ll
  574  cd ..
  575  ll
  576  cd Day2/
  577  ll
  578  mkdir phase1
  579  cp -r base/ phase1/
  580  cp -r overlay/ phase1/
  581  ll
  582  oc delete -k base/
  583  oc delete -k overlay/dev/
  584  oc delete -k overlay/prod/
  585  #NOW IMAGES NEED TO BE CHNGED IN EACH ENV
  586  #DELETE ALL DEPLOYMENTS
  587  vvim overlay/dev/kustomization.yaml 
  588  vim overlay/dev/kustomization.yaml 
  589  kubectl apply -k overlay/dev/kustomization.yaml 
  590  kubectl apply -k overlay/dev/
  591  #DEV DEPLOYED
  592  kubectl apply -k base/
  593  #BASE APPLIED
  594  kubectl get all
  595  kubectl get po
  596  kubectl exec -it dev-myweb-6886b7c78b-5xml2 -- curl localhost:8080
  597  kubectl exec -it myweb-7d84d75bdd-xdnjv -- curl localhost:8080
  598  lll
  599* 
  600  vim base/kustomization.yaml 
  601  vim overlay/dev/kustomization.yaml 
  602  cat base/kustomization.yaml 
  603  cat overlay/dev/kustomization.yaml 
  604  cat base/deploymnt.yaml 
  605  l
  606  ll
  607  vim overlay/dev/kustomization.yaml 
  608  kubectl apply -k overlay/dev/
  609  kubectl delete -k overlay/dev/
  610  oc gte all
  611  kubectl get all
  612  vim overlay/dev/kustomization.yaml 
  613  kubectl apply -k overlay/dev/
  614  kubectl get po
  615  kubectl exec -it myweb-7d84d75bdd-xdnjv -- curl localhost:8080
  616  kubectl exec -it dev-myweb-57656fb767-8mxcv -- curl localhost:8080
  617  ll
  618  #NOW DEV AND BASE HAS TOW IMAGE AND 2 VERSIONS ARE SHOWN
  619  #PRODUCTION WILL HAVE 3 REPLICA ALLWAYS
  620  tree 
  621  cp base/deploymnt.yaml overlay/prod/replica-count.yaml
  622  vim overlay/prod/replica-count.yaml 
  623  #REPLICA COUNT CREATED UNDER PROD
  624  vim overlay/prod/kustomization.yaml 
  625  kubectl kustomization overlay/prod/kustomization.yaml 
  626  kubectl apply -f overlay/prod/
  627  kubectl get apo
  628  kubectl get po
  629  ll
  630  vim overlay/prod/kustomization.yaml 
  631  cat overlay/prod/kustomization.yaml 
  632  ll overlay/prod/
  633  vim overlay/prod/kustomization.yaml 
  634  cat base/deploymnt.yaml 
  635  vim overlay/prod/kustomization.yaml 
  636  kubectl apply -k overlay/prod/
  637  oc get po
  638  ll
  639  cat overlay/prod/replica-count.yaml 
  640  cat overlay/prod/kustomization.yaml 
  641  #NOW 3 replica set to prod
  642  kubectl get all
  643  ll
  644  #Templates
  645  oc get template -n openshift | grep php
  646  oc describe cakephp-mysql-example
  647  oc describe template cakephp-mysql-example
  648  oc describe template/cakephp-mysql-example -n openshift
  649  #oc get template -n openshift | grep php -- can see default templates to build multi tier application
  650  #oc describe template/cakephp-mysql-example -n openshift -- can se details
  651  oc describe template/cakephp-mysql-example -n openshift
  652  oc process template/cakephp-mysql-example --parameters
  653  oc process template/cakephp-mysql-example --parameters -n openshift
  654  #oc process template/cakephp-mysql-example --parameters -n openshift -- will show all available paramenter
  655  oc get all
  656  oc new-app -n openshift template/cakephp-mysql -p DATABSE_USER=cakephp -o yaml
  657  oc new-app template/cakephp-mysql -p DATABSE_USER=cakephp -n openshift --dry-run=server -o yaml
  658  oc new-app template/cakephp-mysql -p DATABSE_USER=cakephp -n openshift
  659  oc new-app template/cakephp-mysql-example -p DATABSE_USER=cakephp -n openshift --dry-run=server -o yaml
  660  oc new-app template/cakephp-mysql-example -p DATABSE_USER=cakephp -n openshift -o yaml
  661  oc new-app template/cakephp-mysql-example -p DATABSE_USER=cakephp -n openshift
  662  oc new-app template/cakephp-mysql-example -p DATABASE_USER=cakephp -n openshift
  663  oc new-app template/cakephp-mysql-example -p DATABASE_USER=cakep
  664  oc get is -n openshift | grep php
  665  ######
  666  #HELM
  667  helm -v
  668  helm -version
  669  helm   version
  670  helm version
  671  #helm version
  672  helm create -h
  673  #helm create -h
  674  ll
  675  mkdir helm
  676  cd helm/
  677  ll
  678  helm create mychart
  679  tree 
  680  #chart dir structrue is created
  681  ll
  682  cd mychart/
  683  ll
  684  l
  685  ll
  686  vim Chart.yaml 
  687  ll charts/
  688  #ll charts/ --dependencies are added here
  689  vim values.yaml 
  690  #vim values.yaml ---- has service,taint etc. can be add required values
  691  ll
  692  cd templates/
  693  ll
  694  #template folder has each resource values and it will fetch values from the values.yaml
  695  cd .
  696  ll
  697  cd ..
  698  ll
  699  vim values.yaml 
  700  ll
  701  cd ..
  702  ll
  703  cd ..
  704  ll
  705  cat phase1/overlay/prod/kustomization.yaml 
  706  ll
  707  cat overlay/prod/replica-count.yaml 
  708  cat overlay/prod/kustomization.yaml 
  709  cat phase1/overlay/prod/kustomization.yaml 
  710  ll
  711  cat base/deploymnt.yaml 
  712  ll
  713  cd helm/mychart/
  714  ll
  715  vim Chart.yaml 
  716  ll
  717  vim values.yaml 
  718  helm install -h
  719  helm install -h  
  720  helm install -h | less
  721  ll
  722  cd ..
  723  helm install sunchart ./mychart
  724  helm ls
  725  #vim values.yaml  -- added image name
  726  #helm install sunchart ./mychart --- installed
  727  #helm ls -- chart name listed
  728  oc get all
  729  oc get po
  730  ll
  731  vim mychart/values.yaml 
  732  oc get po
  733  #image name and tag corrected in values file
  734  helm list
  735  ll
  736  helm upgrade sunchart 
  737  helm upgrade sunchart mychart/
  738  oc get po
  739  helm list
  740  oc get po
  741  oc describe po sunchart-mychart-5f664cb6c4-824pr 
  742  oc get po
  743  oc describe po sunchart-mychart-65f964c874-dn9qk
  744  ll
  745  vim mychart/values.yaml 
  746  #changed port on values
  747  #helm upgrade sunchart mychart/ --- updated chart
  748  helm upgrade sunchart mychart/
  749  oc get po
  750  helm  list
  751  #helm  list -- can see the version changed
  752  ##########
  753  LAB
  754  ###LAB
  755   lab start packaged-charts
  756  ll
  757  ll mychart/
  758  oc whoami 
  759  helm repo  list
  760  helm repo list
  761  helm repo-h
  762  helm repo -h
  763  helm repo add do280-repo  http://helm.ocp4.example.com/charts
  764  helm repo list
  765   helm search repo --versions
  766   helm show values do280-repo/etherpad --version 0.0.6
  767  ll
  768  vim Values.yaml
  769  ll
  770  ll mychart/
  771  mv Values.yaml values.yaml 
  772  ll
  773  oc login -u developer -p developer  https://api.ocp4.example.com:6443
  774  oc project
  775  oc new-project packaged-charts-development
  776  helm install example-app do280-repo/etherpad  -f values.yaml --version 0.0.6
  777  ll
  778  oc get routes.route.openshift.io 
  779  helm list
  780   helm search repo --versions
  781  helm upgrade example-app do280-repo/etherpad  -f values.yaml --version 0.0.7
  782  helm list
  783  oc get po
  784  helm list
  785  oc new-project packaged-charts-production
  786  helm list
  787  ll
  788  vim values.yaml 
  789   helm install production do280-repo/etherpad  -f values.yaml --version 0.0.7
  790  helm list
  791  oc get routes.route.openshift.io 
  792  vim values.yaml 
  793  helm upgrade production do280-repo/etherpad  -f alues.yaml
  794  helm upgrade production do280-repo/etherpad  -f values.yaml
  795  oc get po
  796  ll
  797  helm repo 
  798  helm repo list
  799  helm download 
  800  helm -help | less
  801  helm -help 
  802  helm -h
  803  helm -h | less
  804  helm pull -h
  805  helm pull -h | less
  806  helm repo list
  807  helm pull do280-repo
  808  lab finish packaged-charts
  809  oc project
  810  #######
  811  ##NETWORK POLICY###
  812  LL
  813  cd ..
  814  ll
  815  oc project
  816  oc whoami 
  817  oc new-project nwpolicy
  818  oc project
  819  oc new-app --name=myapp quay.io/redhattraining/hello-world-nginx:v1.0
  820  oc get all
  821  oc describe replicaset.apps/myapp-77ccc86
  822  #created a newapp
  823  #this can not be access externaly so use routes
  824  oc expose svc/myapp 
  825  oc get routes.route.openshift.io 
  826  #TERMINATION coulmn is empty since it is non secure
  827  #different type of routes can be used
  828  oc create route -h | less
  829  #Available Commands:
  830    edge          Create a route that uses edge TLS termination
  831    passthrough   Create a route that uses passthrough TLS termination
  832    reencrypt     Create a route that uses reencrypt TLS termination
  833  history 
  834  ll
  835  rm -rf ~/.mozilla/
  836  oc whoami 
  837  oc login -u developer -p developer  https://api.ocp4.example.com:6443
  838  oc whoami --show-conole
  839  oc whoami --show-console
  840  oc describe routes.route.openshift.io console -n openshift-console
  841  oc login -u kubeadmin -p GkLhW-tYZIb-GsgvP-oDQVd https://api.ocp4.example.com:6443
  842  oc describe routes.route.openshift.io console -n openshift-console
  843  oc get all -n openshift-ingress
  844  #pod/router-default-56cf89f99f-gvtlg --- exterbal access hits first here and it is deployed in infra node or worker node
  845  #oc describe routes.route.openshift.io console -n openshift-console --- console is using reecencrypt
  846  #pod/router-default-56cf89f99f-gvtlg --- exterbal access hits first here and it is deployed in infra node or worker node and this pod manges certs
  847  #edge -- user to ocp- secure
  848  #passthrough --- till router pod arrives and not responds and provide pod end point. 3rd party app prefer this method. 
  849  #reencrypt --- full secured
  850  #service mesh can be used to replace network policy and above 3 msecure methods (edge)
  851  #service mesh can be used to replace network policy and above 3 msecure methods ie TLS termination(edge)
  852  #passthorug need mounting&secret 3rd party cert
  853  oc get all
  854  #deployed app is to expose secure using edge method
  855  #reencrty need 2 cert to implement
  856  oc delete routes.route.openshift.io myapp 
  857  man openssl req 
  858  #route deleted and will recreate with securely
  859  #create csr crt key
  860  man openssl req
  861  ll
  862  #openssl req -new -key example.key --days 365 -out example.csr --- crc generation
  863  openssl req -new -key example.key --days 365 -out example.csr
  864  openssl req -new -key example.key --days 365 -out exapmple.csr
  865  sudo openssl req -new -key example.key --days 365 -out exapmple.csr
  866  openssl req -new -key example.key --days 365 -out example.csr
  867  ll
  868  oc project
  869  oc get svc
  870  oc get routes
  871  oc get route
  872  history 
  873  #create key
  874  openssl genrsa --out example.key 4096
  875  ll
  876  openssl req -new -key example.key --days 365 -out example.csr
  877  ll
  878  #csr generated
  879  openssl x509 -req -days 365 -in example.csr -signkey example.key -out example.csr 
  880  ll
  881  #cert sighn
  882  #cert sighned (self)
  883  #
  884  #common name added as apps.ocp4.example.com and pass changeit
  885  oc get svc
  886  oc create route edge --cert=example.crt --key=example.key --port=8080 --service=myapp
  887  openssl x509 -req -days 365 -in example.csr -signkey example.key -out example.crt
  888  ll
  889  rm -rf example.*
  890  openssl genrsa --out example.key 4096
  891  openssl req -new -key example.key --days 365 -out example.csr
  892  ll
  893  openssl x509 -req -days 365 -in example.csr -signkey example.key -out example.crt
  894  ll
  895  oc create route edge --cert=example.crt --key=example.key --port=8080 --service=myapp
  896  oc get all
  897  oc get routes.route.openshift.io 
  898  firefox http://myapp-nwpolicy.apps.ocp4.example.com & 
  899  firefox https://myapp-nwpolicy.apps.ocp4.example.com & 
  900  #now the url https://myapp-nwpolicy.apps.ocp4.example.com is accessible
  901  ll
  902  history 
  903  #openssl genrsa --out example.key 4096 --- key generated
  904  #openssl req -new -key example.key --days 365 -out example.csr ---csr generated
  905  openssl x509 -req -days 365 -in example.csr -signkey example.key -out example.crt --- signed 
  906  #openssl x509 -req -days 365 -in example.csr -signkey example.key -out example.crt --- signed 
  907  #oc create route edge --cert=example.crt --key=example.key --port=8080 --service=myapp --- route created
  908  #############
  909  ##OPERATOR
  910  oc whoami 
  911  #file integrity operator-- can check changes in master and clusetr admin privleage is nedded to install this
  912  #install via console
  913  #oc get sub -A
  914  oc get sub -A
  915  #oc get sub -A -- check the operator
  916  oc get csv -A | grep file --- will show assosoated with all NS since (we can opt during inst)
  917  #oc get csv -A | grep file --- will show assosoated with all NS since (we can opt during inst)
  918  oc get packagemanifests.packages.operators.coreos.com 
  919  oc describe packagemanifests.packages.operators.coreos.com file-integrity-operator
  920  oc get csv -A | grep file
  921  oc describe packagemanifests.packages.operators.coreos.com file-integrity-operator
  922  oc describe packagemanifests.packages.operators.coreos.com file-integrity-operator | less
  923  #oc get packagemanifests.packages.operators.coreos.com  - can see the operator
  924  #oc describe packagemanifests.packages.operators.coreos.com file-integrity-operator -- can see all the details
  925  oc get fileintegrity
  926  oc get FileIntegrity
  927  oc get crd | grep FileIntegrity
  928  #oc get crd | grep FileIntegrity -- ocp will createt he CRD for this operator
  929  oc describe packagemanifests.packages.operators.coreos.com file-integrity-operator | less
  930  ##337 page
  931  history > Day02.txt
